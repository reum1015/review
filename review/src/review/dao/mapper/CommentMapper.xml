<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 이 XML의 구조대로 구현될 클래스의 이름 => Impl클래스를 대체한다. -->
<mapper namespace="CommentMapper">

    <!-- Beans 클래스의 객체이름(id)과 클래스이름(type)을 명시한다. -->
	<resultMap id="comment" type="review.model.Comment" >
	    <!-- Beans의 멤버변수(property)이름과 대상 테이블의 컬럼(column)을 연결한다. -->
       <result property="id" column="id"/>
	    <result property="nick_name" column="nick_name"/>	    
	    <result property="content" column="content"/>
	    <result property="reg_date" column="reg_date"/>
	    <result property="edit_date" column="edit_date"/>
	    <result property="ip_address" column="ip_address"/>
	    <result property="reported" column="reported"/>
	    <result property="tag" column="tag"/>
	     <result property="member_id" column="member_id"/>
	     <result property="article_id" column="article_id"/>
        
	</resultMap>
	
<!-- 덧글 정보 저장하기 -->
	<insert id="insertComment" parameterType="review.model.Comment" 
		useGeneratedKeys="true" keyProperty="id">
		INSERT INTO comment (
			nick_name, content, reg_date, edit_date, ip_address, article_id, 
			member_id
		) VALUES (
			#{nick_name}, #{content}, now(), now(), #{ip_address}, #{article_id}, 
			#{member_id}	
		)
	</insert>
	
	<!-- 덧글 하나에 대한 정보를 조회한다. -->
	<select id="selectComment" parameterType="review.model.Comment" 
		resultMap="comment">
		SELECT id, nick_name, content, 
			   DATE_FORMAT(reg_date, '%Y-%m-%d %H:%i:%s') as reg_date, 
			   DATE_FORMAT(edit_date, '%Y-%m-%d %H:%i:%s') as edit_date, 
			   ip_address, member_id, article_id
		FROM   comment
		WHERE  id=#{id}
	</select>
	
	<!-- 하나의 게시물에 속한 모든 덧글 목록을 조회한다. -->
	<select id="selectCommentList" parameterType="review.model.Comment" 
		resultMap="comment">
		SELECT   id, nick_name, content, 
			     DATE_FORMAT(reg_date, '%Y-%m-%d %H:%i:%s') as reg_date, 
			     DATE_FORMAT(edit_date, '%Y-%m-%d %H:%i:%s') as edit_date, 
			     ip_address, member_id, bbs_document_id
		FROM     comment
		WHERE    article_id=#{article_id}
		ORDER BY id ASC
	</select>
	
	<!-- 자신의 덧글인지 검사한다 -->
	<select id="selectCommentCountByMemberId"
		parameterType="review.model.Comment"
		resultType="int">
		SELECT COUNT(id) FROM comment
		WHERE id=#{id} AND member_id=#{member_id}
	</select>
	
	
	<!-- 덧글 삭제 하기 -->
	<delete id="deleteComment" parameterType="review.model.Comment">
		DELETE FROM comment WHERE id=#{id}
	</delete>
	
	<!-- 덧글 정보 수정하기 -->
	<update id="updateComment" parameterType="review.model.Comment">
		UPDATE bbs_comment SET
			nick_name=#{nick_name},
			content=#{content},
			ip_address=#{ip_address},
			edit_date=now()
		WHERE id=#{id}
	</update>
	
	<!-- 특정 게시물에 속한 모든 덧글을 삭제한다. -->
	<delete id="deleteCommentAll" parameterType="review.model.Comment">
		DELETE FROM comment WHERE article_id=#{article_id}
	</delete>
	
	
</mapper>