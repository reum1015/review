<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 이 XML의 구조대로 구현될 클래스의 이름 => Impl클래스를 대체한다. -->
<mapper namespace="ImageFileMapper">

    <!-- Beans 클래스의 객체이름(id)과 클래스이름(type)을 명시한다. -->
	<resultMap id="imageFile" type="review.model.ImageFile" >
	    <!-- Beans의 멤버변수(property)이름과 대상 테이블의 컬럼(column)을 연결한다. -->
       <result property="id" column="id"/>
		<result property="originName" column="origin_name"/>
		<result property="fileDir" column="file_dir"/>
		<result property="fileName" column="file_name"/>
		<result property="contentType" column="content_type"/>
		<result property="fileSize" column="file_size"/>
		<result property="reg_date" column="reg_date"/>
		<result property="edit_date" column="edit_date"/>		
		<result property="article_id" column="article_id"/>
		<result property="ip_address" column="ip_address"/>
		<result property="article_id" column="article_id"/>      
		<result property="member_id" column="member_id"/>        
	
	</resultMap>
	
	<!-- 게시글에 속한 첨부파일의 정보를 저장한다. article_write -->
	<insert id="insertArticleFile" parameterType="review.model.ImageFile"
		useGeneratedKeys="true" keyProperty="id">
		INSERT INTO imageFile (
			origin_name, file_dir, file_name, content_type,
			file_size, reg_date, edit_date, article_id 
		) VALUES (
			#{originName}, #{fileDir}, #{fileName}, #{contentType},
			#{fileSize}, now(), now(), #{article_id}
		)
	</insert>
	
	<!-- 프로필에 속한 첨부파일의 정보를 저장한다. -->
	<insert id="insertProfileFile" parameterType="review.model.ImageFile"
		useGeneratedKeys="true" keyProperty="id">
		INSERT INTO imageFile (
			origin_name, file_dir, file_name, content_type,
			file_size, reg_date, edit_date, member_id 
		) VALUES (
			#{originName}, #{fileDir}, #{fileName}, #{contentType},
			#{fileSize}, now(), now(), #{member_id}
		)
	</insert>
	
	
	<!-- 하나의 프로필에 속한 파일목록을 조회한다. -->
	<select id="selectMemberFileList" parameterType="review.model.ImageFile" 
		resultMap="imageFile">
		SELECT id, origin_name, file_dir, file_name, content_type,
			   file_size, reg_date, edit_date, member_id
		FROM   imageFile
		WHERE  member_id=#{member_id}
	</select>
	
	<!-- 하나의 게시물에 속한 파일목록을 조회한다. article_read -->
	<select id="selectArticleFileList" parameterType="review.model.ImageFile" 
		resultMap="imageFile">
		SELECT id, origin_name, file_dir, file_name, content_type,
			   file_size, reg_date, edit_date, article_id
		FROM   imageFile
		WHERE  article_id=#{article_id}
	</select>
	
	
	<!-- 하나의 파일을 조회한다. article_edit_ok -->
	<select id="selectFile" parameterType="review.model.ImageFile" 
		resultMap="imageFile">
		SELECT file_dir, file_name FROM imageFile WHERE id=#{id}
	</select>
	
	<!-- 하나의 파일을 삭제한다. article_edit_ok -->
	<delete id="deleteFile" parameterType="review.model.ImageFile">
		DELETE FROM imageFile WHERE id=#{id}
	</delete>
	
	<!-- 게시글에 속한 파일을 전체 삭제한다. article_delete -->
	<delete id="deleteFileAll" parameterType="review.model.ImageFile">
		DELETE FROM imageFile WHERE article_id=#{article_id}
	</delete>	
	
	
</mapper>